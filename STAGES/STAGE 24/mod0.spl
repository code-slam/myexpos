// Resource Manager Module
alias funcNo R1;
alias currPID R2;
alias currEntry R5;
alias iter R6;

currEntry = PROCESS_TABLE + currPID*16;
// Handling semaphore acquisition
if (funcNo == ACQUIRE_SEMAPHORE) then
    // Locate an available semaphore
    alias i R0;
    alias n R3;
    i = SEMAPHORE_TABLE + 1;
    n = SEMAPHORE_TABLE + 128;
    while (i < n) do
        if ([i]==0) then
            [i] = 1;
            [i-1] = -1;
            R0 = (i - SEMAPHORE_TABLE - 1)/4;
            return;
        endif;
        i = i + 4;
    endwhile;
    R0 = -1;
    return;
endif;

// Handling semaphore release
if (funcNo== RELEASE_SEMAPHORE) then
    alias semid R3;
    alias sem_entry R4;
    sem_entry = SEMAPHORE_TABLE + semid*4;
    if ([sem_entry]==currPID) then
        [sem_entry] = -1;
        alias i R5;
        i = PROCESS_TABLE + 20;
        while (i<PROCESS_TABLE+256) do
            if ([i]==WAIT_SEMAPHORE && [i+1]==semid) then
                [i] = READY;
            endif;
            i = i + 16;
        endwhile;
    else
        if ([sem_entry]!=-1 || [sem_entry+1]==0) then
            R0 = -1;
            return;
        endif;
    endif;
    [sem_entry+1] = [sem_entry+1] - 1;
    R0 = 0;
    return;
endif;

// Terminal acquisition logic
if( funcNo == ACQUIRE_TERMINAL) then
  // Wait if the terminal is already in use
  while([TERMINAL_STATUS_TABLE] == 1) do
    [currEntry + 4] = WAIT_TERMINAL;
    multipush(R0,R1,R2,R3,R5);
    call SCHEDULER;
    multipop(R0,R1,R2,R3,R5);
  endwhile;

  // Lock the terminal
  [TERMINAL_STATUS_TABLE] =1;
  [TERMINAL_STATUS_TABLE + 1] = currPID;

  R0 = 0;
  return;
endif;

// Terminal release logic
if( funcNo == RELEASE_TERMINAL) then
  // Ensure only the acquiring process can free the terminal
  if( [TERMINAL_STATUS_TABLE +1 ] != currPID) then
    R0 = -1;
    return;
  else
    [TERMINAL_STATUS_TABLE] = 0;
    iter=0;

    // Check for waiting processes
    while(iter < 16) do 
      currEntry = PROCESS_TABLE + iter*16;
      if([currEntry + 4] == WAIT_TERMINAL) then
        [currEntry + 4] = READY;
      endif;
      iter=iter+1;
    endwhile;

    R0 = 0;
    return;
  endif;
endif;

// Disk acquisition logic
if (funcNo == ACQUIRE_DISK) then
  // Wait until the disk is available
  while( [DISK_STATUS_TABLE ] == 1) do 
    [currEntry + 4] = WAIT_DISK;
    multipush(R1,R2,R3,R4,R5);
    call SCHEDULER;
    multipop(R1,R2,R3,R4,R5);
  endwhile;

  [DISK_STATUS_TABLE] = 1;
  [DISK_STATUS_TABLE + 4] = currPID;
  return;
endif;

// Inode acquisition logic
if (funcNo == ACQUIRE_INODE) then
  alias inode R2;
  alias cpid R3;
  while([FILE_STATUS_TABLE + inode*4] != -1) do
    [PROCESS_TABLE + cpid* 16 + 4] = WAIT_FILE;
    [PROCESS_TABLE + cpid* 16 + 5] = inode;
    multipush(R1,R2,R3);
    call SCHEDULER;
    multipop(R1,R2,R3);
  endwhile;

  if([INODE_TABLE + inode*16 +1 ] == -1)then
    R0=-1;
    return;
  endif;

  [FILE_STATUS_TABLE + inode*4] = cpid;
  R0=0;
  return;
endif;

// Inode release logic
if( funcNo == RELEASE_INODE) then
  alias inode R2;
  alias cpid R3;
  if([FILE_STATUS_TABLE + inode*4] != cpid) then
    R0=-1;
    return;
  endif;

  alias i R4;
  [FILE_STATUS_TABLE + inode*4] = -1;
  i=0;
  while(i < 16) do
    if([PROCESS_TABLE + i*16 +4] == WAIT_FILE && [PROCESS_TABLE + i*16 +5] == inode )then
      [PROCESS_TABLE + i *16 + 4] = READY;
    endif;
    i=i+1;
  endwhile;
  
  R0=0;
  return;
endif;

// Buffer acquisition logic
if ( funcNo == ACQUIRE_BUFFER) then
  alias buffno R2;
  alias pid R3;

  while([BUFFER_TABLE+buffno*4 + 2] != -1) do
    breakpoint;
    [PROCESS_TABLE + pid * 16 + 4] = WAIT_BUFFER;
    [PROCESS_TABLE + pid * 16 + 5] = buffno;
    multipush(R2,R3);
    call SCHEDULER;
    multipop(R2,R3);
  endwhile;

  [BUFFER_TABLE+buffno*4+2] = pid;
  return;
endif;

// Buffer release logic
if ( funcNo == RELEASE_BUFFER) then
  alias buff R2;
  alias pid R3;
  if(pid != [BUFFER_TABLE+buff*4 + 2])then
    R0=-1;
    return;
  endif;

  [BUFFER_TABLE+buff*4 + 2] = -1;
  alias i R4;
  i=0;
  while(i < 16) do
    if([PROCESS_TABLE + i*16 +4] == WAIT_BUFFER && [PROCESS_TABLE + i*16 +5] == buff)then
      [PROCESS_TABLE + i *16 + 4] = READY;
    endif;
    i=i+1;
  endwhile;

  R0=0;
  return;
endif;

// Default return error
R0=-1;
return;

