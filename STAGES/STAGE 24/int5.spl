//Open and Close syscalls
alias  currentpid  R1 ; 
alias  curr R2;
alias  uptr  R3;
alias ret R14;
currentpid = [SYSTEM_STATUS_TABLE + 1];
curr = PROCESS_TABLE + currentpid *16;

//Switch stacks
[curr + 13] = SP;
uptr = SP;
SP = [curr + 11] * 512 - 1;

alias syscall R4;
syscall = [[PTBR + (uptr-5)*2/512]*512 + (uptr-5)%512];
ret = [PTBR + (uptr-1)*2/512]*512 + (uptr-1)%512;

if(syscall == INT_OPEN) then
  //find free entry in resource table by iterating
  alias i R5;
  alias rentry R6;
   rentry=[curr + 11]*512 + RESOURCE_TABLE_OFFSET;
   i=0;
  while( i < 8) do
    if([rentry + 2*i] == -1 ) then
      break;
    endif;
    i=i+1;    
  endwhile;
  
  //if no free entries in resource table
  if(i == 8) then
    [ret] = -3;
    goto _return_;
  endif;
  //call open function in file manager;
  multipush(R1,R2,R3,R4,R5,R6);
    R1=OPEN;
    //filename
    R2=[[PTBR + (uptr-4)*2/512]*512 + (uptr-4)%512];
    call FILE_MANAGER;
  multipop(R1,R2,R3,R4,R5,R6);
  
  //return if error
  if(R0 == -1 || R0 == -2) then
    [ret] = R0;
    goto _return_;
  endif;

  //occupy the resource table
  [rentry + 2*i ] = FILE;
  [rentry + 2*i + 1] = R0;

  //return resource table index
  [ret] = i;
  goto _return_;
endif;

if(syscall == INT_CLOSE) then
  [curr + 9] = INT_CLOSE;
  alias filedesc R5;
  alias rentry R6;
  filedesc = [[PTBR + (uptr-4)*2/512]*512 + (uptr-4)%512];
  rentry=[curr + 11]*512 + RESOURCE_TABLE_OFFSET;

//filedesc/ resource table index is not valid
  breakpoint;
  if(filedesc < 0 || filedesc > 7 || [rentry + 2*filedesc] != FILE) then
    [ret] = -1;
    goto _return_;
  endif;

  alias ofti R7;
  //get open file table index of the file
  ofti = [rentry + 2*filedesc + 1];

  multipush(R1,R2,R3,R4,R5,R6,R7);
    R1=CLOSE;
    //open file table index
    R2=ofti;
    call FILE_MANAGER;
  multipop(R1,R2,R3,R4,R5,R6,R7);

  [rentry + 2*filedesc] = -1;
  
  [ret] = 0;
  goto _return_;
endif;


_return_:
[curr + 9] =0;
SP = uptr;
ireturn;
